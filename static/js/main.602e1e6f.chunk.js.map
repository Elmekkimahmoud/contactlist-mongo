{"version":3,"sources":["contactlist.js","contactAdd.js","contactUpdate.js","App.js","serviceWorker.js","index.js"],"names":["ContactList","props","delete1","id","axios","delete","then","res","console","log","data","window","location","reload","state","contacts","get","setState","className","this","map","el","key","_id","name","phone","email","onClick","to","Component","ContactAdd","setName","e","target","value","setTel","tel","setEmail","addcontact","alert","post","type","onChange","Updatecontact","handleChange","UpdateContact","modifiedContact","put","match","params","placeholder","App","exact","path","component","contactUpd","Boolean","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.602e1e6f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios'\r\nimport {Link } from 'react-router-dom'\r\nclass ContactList extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            contacts:[]\r\n         }\r\n    }\r\n\r\n\r\ncomponentDidMount(){\r\n    axios.get(\"http://localhost:4000/contacts\")\r\n    .then(res => this.setState({contacts:res.data}))\r\n}\r\ndelete1=(id)=>{\r\n    axios.delete(\"http://localhost:4000/delete_contact/\"+id)\r\n    .then(res =>{\r\n        console.log(res.data);\r\n    window.location.reload()} )\r\n   \r\n}\r\n    render() { \r\n        return ( \r\n            <div className='contact-list'>\r\n                {this.state.contacts.map((el) =>{\r\n                    return(\r\n                        <div className=\"contact-info\" key={el._id}>\r\n                            <p><span>Name:  </span>  <span>{el.name}</span></p>\r\n                            <p><span>Phone:  </span>  <span>{el.phone}</span></p>\r\n                            <p><span>Email:  </span>  <span>{el.email}</span></p>\r\n                            <p>\r\n                            <button onClick={()=>{this.delete1(el._id)}}>Supprimer</button>\r\n                               \r\n                               <Link to={`/update/${el._id}`}> <button>Edit</button></Link>\r\n                            </p>\r\n                        </div>\r\n                    )\r\n                } )}\r\n             </div>\r\n            \r\n         );\r\n    }\r\n}\r\n \r\nexport default ContactList;","import React, { Component } from 'react';\r\nimport axios from 'axios'\r\n \r\nclass ContactAdd extends Component {\r\n  constructor(props){\r\n    super(props)\r\n    this.state=({\r\n      name:'',\r\n      tel:'',\r\n      email:'',\r\n    })\r\n  }\r\n  setName=e=> {\r\n    this.setState({\r\n    name:e.target.value\r\n  })}\r\n  setTel=e=> {  this.setState({\r\n    tel:e.target.value\r\n  })}\r\n  setEmail=e=> {  this.setState({\r\n    email:e.target.value\r\n  })}\r\n  addcontact = () => {\r\n    if (this.state.name !== '' && (this.state.tel !== '' || this.state.email !== '')) {\r\n    axios.post(\"http://localhost:4000/contact\",{\r\n     name:this.state.name, phone:this.state.tel,email:this.state.email\r\n    })\r\n  }\r\nelse { alert('Required fields!! Name or tel or email') }\r\n}\r\n       render() {\r\n        return (\r\n           <form >\r\n        <h2>\r\n          ADD contact Page\r\n        </h2>\r\n        <br/>\r\n        <br/>\r\n        <span className=\"subtitle\">NAME:</span>\r\n        <br/>\r\n        <input type=\"text\" onChange={this.setName}  />\r\n        <br/>\r\n        <span className=\"subtitle\">Tel:</span>\r\n        <br/>\r\n        <input type=\"text\" onChange={this.setTel}  />\r\n        <br/>\r\n        <br/>\r\n        <span className=\"subtitle\">EMAIL:</span>\r\n        <br/>\r\n        <input type=\"email\" onChange={this.setEmail}  />\r\n        <br/>\r\n        <br/>\r\n        <br/>\r\n   <button onClick={this.addcontact} >Submit</button> \r\n     </form>\r\n      );\r\n    }\r\n}\r\nexport default ContactAdd","import React, { Component } from 'react'\r\nimport axios from 'axios';\r\n\r\nexport default class Updatecontact extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { \r\n            name:'',\r\n            phone:'',\r\n            email:''\r\n         }\r\n    }\r\n    handleChange=(e)=>{\r\n        this.setState({\r\n            [e.target.name]:e.target.value\r\n        })\r\n    }\r\n    componentDidMount() {\r\n\r\n    axios.get( 'http://localhost:4000/contact1/'+this.props.match.params.id)\r\n    .then(res => this.setState({name:res.data.name,phone:res.data.phone,email:res.data.email}))\r\n    }\r\n \r\n    UpdateContact=()=>{\r\n        let modifiedContact ={\r\n            name:this.state.name,\r\n            phone:this.state.phone,\r\n            email:this.state.email\r\n        }\r\n        axios.put('http://localhost:4000/update/'+this.props.match.params.id,modifiedContact)\r\n    }\r\n    render() {\r\n        return (\r\n            <div className='editcont' >\r\n                <input name=\"name\" placeholder=\"name\" type=\"text\" value={this.state.name} onChange={(e) =>this.handleChange(e)} /><br/>\r\n                <input name=\"phone\" placeholder=\"phone\" type=\"text\" value={this.state.phone} onChange={(e) =>this.handleChange(e)}/><br/>\r\n                <input name=\"email\" placeholder=\"email\" type=\"text\" value={this.state.email} onChange={(e) =>this.handleChange(e)}/>\r\n            <button onClick={this.UpdateContact}>modifier</button>\r\n            \r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Route,Link } from 'react-router-dom';\nimport ContactList from './contactlist';\nimport ContactAdd from './contactAdd'\nimport contactUpd from './contactUpdate'\n\nfunction App() {\n  return (\n    <Router>\n    <div className=\"App\">\n      <h1>Contact App</h1>\n      \n      \n      <Link to={`/contacts`}><button>Contact List</button></Link>\n      <Link to={`/add`}><button>Add</button></Link>\n      \n  \n      <div className=\"add-contact\">\n  \n        <Route exact path='/contacts' component={ContactList}/>\n        <Route exact path='/add' component={ContactAdd}/>\n  \n        <Route exact path='/update/:id' component={contactUpd}/>\n\n      </div>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}